import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;

public class Astar {

	public static void main(String[] args) {
		int[][] startBoard = new int[][] {
			{3,4,5},
			{2,0,6},
			{1,7,8}
		};
		int[][] goalBoard = new int[][] {
			{1,2,3},
			{4,5,6},
			{7,8,0}
		};
		
		System.out.println(minimumSteps(startBoard, goalBoard));
	}
	
	static Map<Integer, int[]> goalMap;
	static int[][] goalBoard;
	static int[][] directions = new int[][] {
		{1,0}, {-1,0}, {0,1}, {0,-1}
	};
	public static int minimumSteps(int[][] startingBoard, int[][] goal) {
		goalBoard = goal;
		goalMap = createGoalmap(goalBoard);
		Set<BoardState> visited = new HashSet();
		BoardState s = new BoardState(startingBoard, null, 0, calculateheuristic(startingBoard));
		visited.add(s);
		PriorityQueue<BoardState> pq = new PriorityQueue<BoardState>((a,b)->(a.heuristic+a.g)-(b.heuristic+b.g));
		pq.offer(s);
		
		while(!pq.isEmpty()) {
			BoardState curState = pq.poll();
			if(addAllChilds(curState, pq, visited)) return curState.g+1;
		}
		
		return -1;
	}
	
	public static boolean addAllChilds(BoardState curState, PriorityQueue<BoardState> pq, Set<BoardState> visited) {
		int[][] board = curState.board;
		int row = board.length, col = board[0].length;
		for(int i=0;i<row;i++) {
			for(int j=0;j<col;j++) {
				if(board[i][j]==0) {
					for(int[] dir:directions) {
						int x = i+dir[0], y = j+dir[1];
						if(x<0||y<0||x>=row||y>=col) continue;
						int[][] newBoard = new int[board.length][board[0].length];
						createCopy(newBoard, board);
						newBoard[i][j] = board[x][y];
						newBoard[x][y] = board[i][j];
						if(CheckGoalReached(newBoard)) return true;
						BoardState child = new BoardState(newBoard, curState, curState.g+1, calculateheuristic(newBoard));
						if(!visited.contains(child)) {
							pq.offer(child);
							visited.add(child);
						} 
					}
					return false;
				}
			}
		}
		return false;
	}
	
	public static void createCopy(int[][] newBoard, int[][] oldBoard) {
		for(int i=0;i<oldBoard.length;i++) {
			for(int j=0;j<oldBoard[0].length;j++) {
				newBoard[i][j] = oldBoard[i][j];
			}
		}
	}
	
	public static boolean CheckGoalReached(int[][] board) {
		for(int i=0;i<goalBoard.length;i++) {
			for(int j=0;j<goalBoard[0].length;j++) {
				if(goalBoard[i][j]!=board[i][j]) return false;
			}
		}
		return true;
	}
	
	public static int calculateheuristic(int[][] board) {
		int h = 0;
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board.length;j++) {
				h += Math.abs(i-goalMap.get(board[i][j])[0]) + Math.abs(j-goalMap.get(board[i][j])[1]);
			}
		}
		return h;
	}
	
	public static Map<Integer, int[]> createGoalmap(int[][] goalBoard){
		Map<Integer, int[]> goalMap = new HashMap();
		for(int i=0;i<goalBoard.length;i++) {
			for(int j=0;j<goalBoard[0].length;j++) {
				goalMap.put(goalBoard[i][j], new int[] {i, j});
			}
		}
		return goalMap;
	}

}

class BoardState{
	int[][] board;
	BoardState parent;
	int g;
	int heuristic;
	
	public BoardState(int[][] board, BoardState parent, int g, int heuristic) {
		this.board = board;
		this.parent = parent;
		this.g = g;
		this.heuristic = heuristic;
	}

	public boolean equals(BoardState state1, BoardState state2) {
		for(int i=0;i<state1.board.length;i++) {
			for(int j=0;j<state1.board[0].length;j++) {
				if(state1.board[i][j]!=state2.board[i][j]) return false;
			}
		}
		return true;
	}
	
	
}